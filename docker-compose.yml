# this docker compose should be compatible also with older (<=v24) version of docker engine

services:
  redis:
    image: redis:8-alpine
    container_name: yaptide_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  postgresql:
    image: postgres:16-alpine
    container_name: yaptide_postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-yaptide_db}
      POSTGRES_USER: ${POSTGRES_USER:-yaptide_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yaptide_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h $${POSTGRES_HOST:-postgresql} -p $${POSTGRES_PORT:-5432} -U $${POSTGRES_USER:-yaptide_user}"]

  yaptide_flask:
    build:
      context: .
      dockerfile: Dockerfile-flask
    image: yaptide_flask
    container_name: yaptide_flask
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://yaptide_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://yaptide_redis:6379/0
      - CERT_AUTH_URL=${CERT_AUTH_URL:-}
      - KEYCLOAK_BASE_URL=${KEYCLOAK_BASE_URL:-}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-}
      - BACKEND_EXTERNAL_URL=${BACKEND_EXTERNAL_URL:-}
      - FLASK_SQLALCHEMY_DATABASE_URI=postgresql+psycopg://${POSTGRES_USER:-yaptide_user}:${POSTGRES_PASSWORD:-yaptide_password}@postgresql:5432/${POSTGRES_DB:-yaptide_db}
    depends_on:
      redis:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      logstash:
        condition: service_healthy

  yaptide_simulation_worker:
    build:
      context: .
      dockerfile: Dockerfile-simulation-worker
    image: yaptide_simulation_worker
    container_name: yaptide_simulation_worker
    restart: unless-stopped
    volumes:
      - simulators:/simulators:rw
    deploy:
      resources:
        limits:
          # the explanation of below syntax: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
          cpus: ${MAX_CORES-1.0}
    env_file: .env
    environment:
      - CELERY_BROKER_URL=redis://yaptide_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://yaptide_redis:6379/0
      - BACKEND_INTERNAL_URL=http://yaptide_flask:6000
      - LOG_LEVEL_ROOT=${LOG_LEVEL_ROOT:-WARNING}
    healthcheck:
      test: ["CMD-SHELL", "celery --app yaptide.celery.simulation_worker inspect ping"]
    depends_on:
      redis:
        condition: service_healthy
      yaptide_flask:
        condition: service_healthy

  yaptide_helper_worker:
    build:
      context: .
      dockerfile: Dockerfile-helper-worker
    image: yaptide_helper_worker
    container_name: yaptide_helper_worker
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
    env_file: .env
    environment:
      - CELERY_BROKER_URL=redis://yaptide_redis:6379/0
      - CELERY_RESULT_BACKEND=redis://yaptide_redis:6379/0
      - LOG_LEVEL_ROOT=${LOG_LEVEL_ROOT:-WARNING}
      - BACKEND_INTERNAL_URL=http://yaptide_flask:6000
      - FLASK_SQLALCHEMY_DATABASE_URI=postgresql+psycopg://${POSTGRES_USER:-yaptide_user}:${POSTGRES_PASSWORD:-yaptide_password}@postgresql:5432/${POSTGRES_DB:-yaptide_db}
    healthcheck:
      test: ["CMD-SHELL", "celery --app yaptide.utils.helper_worker inspect ping"]
    depends_on:
      redis:
        condition: service_healthy
      yaptide_flask:
        condition: service_healthy

  nginx:
    image: yaptide_nginx
    container_name: yaptide_nginx
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile-nginx
    ports:
      - 5000:5000
      - 8443:8443
    depends_on:
      yaptide_flask:
        condition: service_healthy
      yaptide_simulation_worker:
        condition: service_healthy
      yaptide_helper_worker:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: yaptide_logstash
    restart: unless-stopped
    ports:
      - "5001:5001"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bash", "-c", "</dev/tcp/localhost/5001"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: yaptide_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    restart: unless-stopped
    volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\"' "]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: yaptide_kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5


volumes:
  data:
  simulators:
  elasticsearch-data:
