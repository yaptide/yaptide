[pytest]
# for unit tests lets use the in-memory broker and result backend
# this means that the tests for Celery can ran without any external dependencies (i.e. redis)
# we use as well an in-memory database
env =
    CELERY_BROKER_URL=memory://
    CELERY_RESULT_BACKEND=cache+memory://
    # FLASK_ prefixed variables are used by the flask app factory
    FLASK_TESTING=True
    FLASK_DEBUG=True
    FLASK_SERVER_NAME=127.0.0.1
    # default in-memory database for testing
    FLASK_SQLALCHEMY_DATABASE_URI=sqlite://
    # internal address of the flask app
    BACKEND_INTERNAL_URL=http://127.0.0.1:5000
# the lines below are for pytest to print the logs in the console
log_cli = true
log_cli_level = INFO

# print duration of each test
#addopts = --durations=0

# set the fixed port for the live server (from pytest-flask)
addopts = --live-server-port=5000
# create a new session of the live server for each test, to achieve a better test isolation
live_server_scope = function

# run tests only from `tests` directory
# we do not want to run tests of the converter git dependency (in .venv/src/converter)
# as the converter tests assume to be run in a standalone converter repo
testpaths = tests
