name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

jobs:
  build-and-test:
    runs-on:  ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        platform: [ubuntu-latest, windows-latest]
        exclude:
          - python-version: '3.11'
            platform: windows-latest
          - python-version: '3.9'
            platform: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for production
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for tests
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Run main tests
        run: pytest

  deploy-to-github-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ github.actor }}
      PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_NAME: ${{ github.repository }}-flask
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile-flask
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  report-test-converage-deepsource:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies for production and test
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Install deepsource CLI
        run: curl https://deepsource.io/cli | sh

      - name: Generate tests coverage report
        run: pytest --cov=./ --cov-report xml

      - name: Upload coverage report to deepsource
        run: ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
