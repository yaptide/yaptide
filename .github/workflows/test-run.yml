# A basic CI workflow that tests if the app works and then deploys it on an openstack machine

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Get repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          
      #install requirements.txt
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      #run pytest unit tests
      - name: Run main tests
        run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    env:
      BACKEND_HOST: 30.30.30.8
      BACKEND_USER: ubuntu
      FRONTEND_HOST: 149.156.182.181
      FRONTEND_USER: ubuntu
      SHIELDHIT_PATH: '/home/ubuntu/usr/shieldhit/v0.9.2/bin'

    steps:
      # get the repo to the github agent
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      
      # add keys to the SSH agent
      - uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_C3_TEST }}
            
      # Create the known_hosts file with the open stack machines public keys
      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ env.FRONTEND_HOST }} >> ~/.ssh/known_hosts
      
      # if the flask app is already running on the openstack machine, then kill it before updating the source code
      - name: Kill flask app
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.BACKEND_HOST }}
          username: ${{ env.BACKEND_USER }}
          key: ${{ secrets.DEPLOY_C3_TEST }}
          proxy_host: ${{ env.FRONTEND_HOST }}
          proxy_username: ${{ env.BACKEND_USER }}
          proxy_key: ${{ secrets.DEPLOY_C3_TEST }}
          script: if pgrep flask; then pkill flask; fi
          
      # copy the new files form the github agent onto the openstack machine via proxy (inspired by: https://stackoverflow.com/questions/16654751/rsync-through-ssh-tunnel)
      - name: Copy files to the machine
        if: github.ref == 'refs/heads/master'
        run: rsync -e "ssh -A ${{ env.FRONTEND_USER }}@${{ env.FRONTEND_HOST }} ssh" . ${{ env.BACKEND_USER }}@${{ env.BACKEND_HOST }}:~/yaptide --delete --recursive
      
      # recreate env (it was destroyed by rsync during copying)
      # enter env and install requirements
      # set flask environment to developement and specify the package containing the app factory
      # then run the app detatched using screen (inspired by: https://unix.stackexchange.com/questions/266571/remotely-starting-a-screen-session-through-ssh-and-closing-the-ssh-session-immed)
      - name: Build and run the app via ssh
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.BACKEND_HOST }}
          username: ${{ env.BACKEND_USER }}
          key: ${{ secrets.DEPLOY_C3_TEST }}
          proxy_host: ${{ env.FRONTEND_HOST }}
          proxy_username: ${{ env.BACKEND_USER }}
          proxy_key: ${{ secrets.DEPLOY_C3_TEST }}
          script: |
            cd yaptide
            rm -rf venv
            python3 -m venv env
            source env/bin/activate
            python3 -m pip install --upgrade pip
            pip3 install -r requirements.txt
            FLASK_ENV=developement FLASK_APP=yaptide.application PATH=$PATH:${{ env.SHIELDHIT_PATH }} screen -d -m flask run --host 0.0.0.0
